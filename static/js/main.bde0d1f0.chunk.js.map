{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","startValues","value","isValid","name","NewMovie","state","formValues","sendCheck","updateValue","event","target","changeState","id","propertie1","propertie2","setState","prevState","validationForm","length","test","SendMovie","acceptSend","Object","values","every","sendMovie","entries","reduce","acc","current","props","addMovie","this","htmlFor","type","classNames","onChange","onBlur","onClick","filter","formItem","item","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bde0d1f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MovieCard.scss';\r\n\r\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\r\n  <div className=\"card\">\r\n    <div className=\"card-image\">\r\n      <figure className=\"image is-4by3\">\r\n        <img\r\n          src={imgUrl}\r\n          alt=\"Film logo\"\r\n        />\r\n      </figure>\r\n    </div>\r\n    <div className=\"card-content\">\r\n      <div className=\"media\">\r\n        <div className=\"media-left\">\r\n          <figure className=\"image is-48x48\">\r\n            <img\r\n              src=\"images/imdb-logo.jpeg\"\r\n              alt=\"imdb\"\r\n            />\r\n          </figure>\r\n        </div>\r\n        <div className=\"media-content\">\r\n          <p className=\"title is-8\">{title}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {description}\r\n        <br />\r\n        <a href={imdbUrl}>IMDB</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nMovieCard.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  description: PropTypes.string,\r\n  imgUrl: PropTypes.string.isRequired,\r\n  imdbUrl: PropTypes.string.isRequired,\r\n};\r\n\r\nMovieCard.defaultProps = {\r\n  description: '',\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './MoviesList.scss';\r\nimport { MovieCard } from '../MovieCard';\r\n\r\nexport const MoviesList = ({ movies }) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard key={movie.imdbId} {...movie} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string.isRequired,\r\n      description: PropTypes.string,\r\n      imgUrl: PropTypes.string.isRequired,\r\n      imdbUrl: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nMoviesList.defaultProps = {\r\n  movies: [],\r\n};\r\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewMovie.scss';\nimport classNames from 'classnames/bind';\n\nconst startValues = {\n  title: {\n    value: '',\n    isValid: null,\n    name: 'title',\n  },\n  description: {\n    value: '',\n    isValid: true,\n    name: 'description',\n  },\n  imgUrl: {\n    value: '',\n    isValid: null,\n    name: 'imgUrl',\n  },\n  imdbUrl: {\n    value: '',\n    isValid: null,\n    name: 'imdbUrl',\n  },\n  imdbId: {\n    value: '',\n    isValid: null,\n    name: 'imdbId',\n  },\n};\n\nexport class NewMovie extends Component {\n  state = {\n    formValues: { ...startValues },\n    sendCheck: false,\n  };\n\n  updateValue = (event) => {\n    const { target } = event;\n\n    this.changeState(target.id, 'value', target.value);\n  };\n\n  changeState = (propertie1, propertie2, value) => {\n    this.setState(prevState => ({\n      formValues: {\n        ...prevState.formValues,\n        [propertie1]: {\n          ...prevState.formValues[propertie1],\n          [propertie2]: value,\n        },\n      },\n      sendCheck: false,\n    }));\n  };\n\n  validationForm = (event) => {\n    const { target } = event;\n\n    if (\n      (target.id === 'title' || target.id === 'imdbId')\n      && target.value.length < 1\n    ) {\n      this.changeState(target.id, 'isValid', false);\n\n      return false;\n    }\n\n    if (target.id === 'imgUrl' || target.id === 'imdbUrl') {\n      // eslint-disable-next-line max-len\n      const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n      if (!pattern.test(target.value)) {\n        this.changeState(target.id, 'isValid', false);\n\n        return false;\n      }\n    }\n\n    this.changeState(target.id, 'isValid', true);\n\n    return true;\n  };\n\n  SendMovie = (event) => {\n    const acceptSend = Object.values(this.state.formValues)\n      .every(value => value.isValid === true);\n\n    this.setState({\n      sendCheck: true,\n    });\n\n    if (acceptSend) {\n      const sendMovie = Object.entries(this.state.formValues)\n        .reduce((acc, current) => {\n          return {\n            ...acc,\n            [current[0]]: current[1].value,\n          };\n        }, {});\n\n      this.props.addMovie(sendMovie);\n      this.setState({\n        formValues: startValues,\n        sendCheck: false,\n      });\n    }\n  };\n\n  render() {\n    const { formValues, sendCheck } = this.state;\n\n    return (\n      <form>\n\n        <div className=\"movie-form-wrapper\">\n          <label htmlFor=\"title\">Title</label>\n          <input\n            type=\"text\"\n            className={\n              classNames(\n                'movie-form-item',\n                'movie-form-title',\n                { isValid: formValues.title.isValid === false },\n              )\n            }\n            id=\"title\"\n            value={formValues.title.value}\n            onChange={this.updateValue}\n            onBlur={this.validationForm}\n          />\n        </div>\n\n        <div className=\"movie-form-wrapper\">\n          <label htmlFor=\"description\">Description</label>\n          <textarea\n            type=\"text\"\n            className={\n              classNames(\n                'movie-form-item',\n                'movie-form-description',\n                { isValid: formValues.description.isValid === false },\n              )\n            }\n            id=\"description\"\n            value={formValues.description.value}\n            onChange={this.updateValue}\n            onBlur={this.validationForm}\n          />\n        </div>\n\n        <div className=\"movie-form-wrapper\">\n          <label htmlFor=\"imgUrl\">imgUrl</label>\n          <input\n            type=\"text\"\n            className={\n              classNames(\n                'movie-form-item',\n                'movie-form-imgUrl',\n                { isValid: formValues.imgUrl.isValid === false },\n              )\n            }\n            id=\"imgUrl\"\n            value={formValues.imgUrl.value}\n            onChange={this.updateValue}\n            onBlur={this.validationForm}\n          />\n        </div>\n\n        <div className=\"movie-form-wrapper\">\n          <label htmlFor=\"imdbUrl\">imdbUrl</label>\n          <input\n            type=\"text\"\n            className={\n              classNames(\n                'movie-form-item',\n                'movie-form-imdbUrl',\n                { isValid: formValues.imdbUrl.isValid === false },\n              )\n            }\n            id=\"imdbUrl\"\n            value={formValues.imdbUrl.value}\n            onChange={this.updateValue}\n            onBlur={this.validationForm}\n          />\n        </div>\n\n        <div className=\"movie-form-wrapper\">\n          <label htmlFor=\"imdbId\">imdbId</label>\n          <input\n            type=\"text\"\n            className={\n              classNames(\n                'movie-form-item',\n                'movie-form-imdbId',\n                { isValid: formValues.imdbId.isValid === false },\n              )\n            }\n            id=\"imdbId\"\n            value={formValues.imdbId.value}\n            onChange={this.updateValue}\n            onBlur={this.validationForm}\n          />\n        </div>\n\n        <button\n          className=\"add-new-movie-btn\"\n          type=\"button\"\n          onClick={this.SendMovie}\n        >\n          Add new movie\n        </button>\n\n        {\n          sendCheck\n            ? (\n              Object.values(formValues)\n                .filter(formItem => (\n                  formItem.isValid === false || formItem.isValid === null\n                ))\n                .map(item => (\n                  <p key={item.name} className=\"error-form-submit\">\n                    {item.name}\n                    {' is inValid'}\n                  </p>\n                ))\n            )\n            : null\n        }\n      </form>\n\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(prevState => (\n      {\n        movies: [\n          ...prevState.movies,\n          movie,\n        ],\n      }\n    ));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}